{"version":3,"sources":["components/NavigationBar.tsx","components/Score.tsx","components/TetrominoPreview.tsx","components/game-logic/Tetrominos.tsx","components/Game.tsx","components/Home.tsx","App.tsx","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","Brand","Nav","className","Link","href","React","Component","Score","Container","style","padding","Row","Col","Badge","width","this","props","score","level","TetrominoPreview","grid","i","j","document","createElement","classList","add","backgroundColor","state","tetromino","console","log","blocks","block","colour","rotation","row","lastEnd","piece","constructor","name","rotate","updatePosition","drawTetromino","Math","max","map","x","previewContainer","getElementById","cell","appendChild","drawRotation","id","Tetromino","dx","dy","Square","Line","y","T","L","pivot","J","TETROMINOS","getRandomTetromino","floor","random","length","Game","intervals","randomTetromino","tetrominoRotation","push","activeTetromino","gameLooop","keyCode","detectCollision","copyTetromino","JSON","parse","stringify","storeBlock","completeRows","every","rowNum","some","shift","setState","autoDropTetromino","getCompleteRows","clearRow","detectLose","alert","gameContainer","window","addEventListener","event","gameLoop","clearInterval","setInterval","runGame","rotateTetromino","moveTetromino","interval","xs","Home","marginTop","sm","Card","Header","Body","Title","Text","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4cd3a0a.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar, Nav} from \"react-bootstrap\";\n\nexport default class NavigationBar extends React.Component {\n    render() {\n        return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>Tetris Clone</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/\">Home</Nav.Link>\n                <Nav.Link href=\"https://github.com/V-Wong/WebTetris\">Source Code</Nav.Link>\n                <Nav.Link href=\"https://vwong.dev\">Other Projects</Nav.Link>\n            </Nav>\n        </Navbar>\n        )\n    }\n}","import React from \"react\";\n\nimport {Badge, Container, Row, Col} from \"react-bootstrap\";\n\nexport default class Score extends React.Component<any, any> {\n  render() {\n    return (\n      <Container style={{padding: 0}}>\n        <Row>\n          <Col>\n            <h3>\n              <Badge variant=\"primary\" style={{width: \"100%\"}}>Score: {this.props.score}</Badge>\n            </h3>\n          </Col>\n          <Col>\n            <h3>\n              <Badge variant=\"danger\" style={{width: \"100%\"}}>Level: {this.props.level}</Badge>\n            </h3>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}","import React from \"react\";\n\nimport {Tetromino} from \"./game-logic/Tetrominos\";\n\nconst GRID_HEIGHT = 20;\nconst DEFAULT_GRID_COLOUR = \"grey\";\n\nexport default class TetrominoPreview extends React.Component<any, any> {\n  constructor(props) {\n    super(props);\n\n    const grid = [];\n    for (let i = 0; i < GRID_HEIGHT; i++) {\n      grid[i] = [];\n      for (let j = 0; j < 4; j++) {\n        grid[i][j] = document.createElement(\"div\");\n        grid[i][j].classList.add(\"cell\");\n        grid[i][j].style.backgroundColor = DEFAULT_GRID_COLOUR;\n      }\n    }\n\n    this.state = {\n      grid: grid\n    } \n  }\n\n  drawTetromino(tetromino: Tetromino) {\n    console.log(tetromino);\n    for (let block of tetromino.blocks) {\n      this.state.grid[block[1]][block[0]].style.backgroundColor = tetromino.colour;\n    }\n  }\n\n  drawRotation() {\n    if (!this.props.rotation) return;\n\n    for (let row of this.state.grid) {\n      for (let cell of row) {\n        cell.style.backgroundColor = DEFAULT_GRID_COLOUR;\n      }\n    }\n\n    let lastEnd = 0;\n    for (let tetromino of this.props.rotation) {\n      const piece = new tetromino();\n\n      if (piece.constructor.name === \"Line\") {\n        piece.rotate();\n      }\n\n      for (let block of piece.blocks) {\n        while (block[0] > 3) piece.updatePosition(-1, 0);\n        while (lastEnd && block[1] < lastEnd + 3) piece.updatePosition(0, 1);\n      }\n\n      this.drawTetromino(piece);\n      lastEnd = Math.max(...piece.blocks.map(x => x[1]));\n    }\n  }\n\n  componentDidMount() {\n    const previewContainer = document.getElementById(\"tetromino-preview\");\n    for (let row of this.state.grid) {\n      for (let cell of row) {\n        previewContainer.appendChild(cell);\n      }\n    }\n    this.drawRotation();\n  }\n\n  componentDidUpdate() {\n    this.drawRotation();\n  }\n\n  render() {\n    return (\n      <div id=\"tetromino-preview\"></div>\n    )\n  }\n}","class Tetromino {\n    blocks: Array<Array<number>>;\n    rotation: number;\n    colour: string;\n\n    updatePosition(dx: number, dy: number) {\n        for (let block of this.blocks) {\n            block[0] += dx;\n            block[1] += dy;\n        }\n    }\n\n    rotate() {\n        return null;\n    }\n}\n\nclass Square extends Tetromino {\n    constructor() {\n        super();\n        this.blocks = [[6, 0], [6, 1], [7, 0], [7, 1]];\n        this.colour = \"red\";\n    }\n}\n\nclass Line extends Tetromino {\n    constructor() {\n        super();\n        this.blocks = [[6, 0], [6, 1], [6, 2], [6, 3]];\n        this.rotation = 0;\n        this.colour = \"blue\";\n    }\n\n    rotate() {\n        if (this.rotation % 4 === 0) {\n            const y = this.blocks[3][1]\n\n            let i = -1\n            for (let block of this.blocks) {\n                block[0] = block[0] + i;\n                block[1] = y;\n                i += 1;\n            }\n        } else if (this.rotation % 4 === 1) {\n            const x = this.blocks[2][0];\n\n            let i = -3\n            for (let block of this.blocks) {\n                block[0] = x;\n                block[1] = block[1] + i;\n                i += 1;\n            }\n        } else if (this.rotation % 4 === 2) {\n            const y = this.blocks[3][1];\n\n            let i = -2\n            for (let block of this.blocks) {\n                block[0] = block[0] + i;\n                block[1] = y;\n                i += 1;\n            } \n        } else {\n            const x = this.blocks[1][0];\n\n            let i = -3;\n            for (let block of this.blocks) {\n                block[0] = x;\n                block[1] = block[1] + i;\n                i += 1\n            }\n        }\n\n        this.rotation += 1\n    }\n}\n\nclass T extends Tetromino {\n    constructor() {\n        super();\n        this.blocks = [[6, 0], [7, 0], [8, 0], [7, 1]];\n        this.rotation = 0;\n        this.colour = \"green\";\n    }\n\n    rotate() {\n        if (this.rotation % 4 == 0) {\n            this.blocks[0] = [this.blocks[0][0] + 1, this.blocks[0][1] - 1]\n            this.blocks[2] = [this.blocks[2][0] - 1, this.blocks[2][1] + 1]\n            this.blocks[3] = [this.blocks[3][0] - 1, this.blocks[3][1] - 1]\n        } else if (this.rotation % 4 == 1) {\n            this.blocks[0] = [this.blocks[0][0] + 1, this.blocks[0][1] + 1]\n            this.blocks[2] = [this.blocks[2][0] - 1, this.blocks[2][1] - 1]\n            this.blocks[3] = [this.blocks[3][0] + 1, this.blocks[3][1] - 1]\n        } else if (this.rotation % 4 == 2) {\n            this.blocks[0] = [this.blocks[0][0] - 1, this.blocks[0][1] + 1]\n            this.blocks[2] = [this.blocks[2][0] + 1, this.blocks[2][1] - 1]\n            this.blocks[3] = [this.blocks[3][0] + 1, this.blocks[3][1] + 1]\n        } else {\n            this.blocks[0] = [this.blocks[0][0] - 1, this.blocks[0][1] - 1]\n            this.blocks[2] = [this.blocks[2][0] + 1, this.blocks[2][1] + 1]\n            this.blocks[3] = [this.blocks[3][0] - 1, this.blocks[3][1] + 1]\n        }\n\n        this.rotation += 1\n    }\n}\n\nclass L extends Tetromino {\n    constructor() {\n        super();\n        this.blocks =  [[6, 0], [7, 0], [8, 0], [8, 1]];\n        this.rotation = 0;\n        this.colour = \"yellow\";\n    }\n\n    rotate() {\n        const pivot = this.blocks[1];\n\n        if (this.rotation % 4 == 0) {\n            this.blocks[0] = [pivot[0], pivot[1] - 1]\n            this.blocks[2] = [pivot[0] - 1, pivot[1] + 1]\n            this.blocks[3] = [pivot[0], pivot[1] + 1]\n        } else if (this.rotation % 4 == 1) {\n            this.blocks[0] = [pivot[0] - 1, pivot[1]]\n            this.blocks[2] = [pivot[0] - 1, pivot[1] - 1]\n            this.blocks[3] = [pivot[0] + 1, pivot[1]]\n        } else if (this.rotation % 4 == 2) {\n            this.blocks[0] = [pivot[0] + 1, pivot[1] - 1]\n            this.blocks[2] = [pivot[0], pivot[1] - 1]\n            this.blocks[3] = [pivot[0], pivot[1] + 1]\n        } else {\n            this.blocks[0] = [pivot[0] + 1, pivot[1] + 1]\n            this.blocks[2] = [pivot[0] - 1, pivot[1]]\n            this.blocks[3] = [pivot[0] + 1, pivot[1]]\n        }\n\n        this.rotation += 1\n    }\n}\n\nclass J extends Tetromino {\n    constructor() {\n        super();\n        this.blocks =  [[6, 0], [7, 0], [8, 0], [6, 1]];\n        this.rotation = 0\n        this.colour = \"orange\";\n    }\n\n    rotate() {\n        const pivot = this.blocks[1];\n\n        if (this.rotation % 4 == 0) {\n            this.blocks[0] = [pivot[0], pivot[1] - 1]\n            this.blocks[2] = [pivot[0] - 1, pivot[1] - 1]\n            this.blocks[3] = [pivot[0], pivot[1] + 1]\n        } else if (this.rotation % 4 == 1) {\n            this.blocks[0] = [pivot[0] - 1, pivot[1]]\n            this.blocks[2] = [pivot[0] + 1, pivot[1]]\n            this.blocks[3] = [pivot[0] + 1, pivot[1] - 1]\n        } else if (this.rotation % 4 == 2) {\n            this.blocks[0] = [pivot[0], pivot[1] + 1]\n            this.blocks[2] = [pivot[0], pivot[1] - 1]\n            this.blocks[3] = [pivot[0] + 1, pivot[1] + 1]\n        } else {\n            this.blocks[0] = [pivot[0] - 1, pivot[1]]\n            this.blocks[2] = [pivot[0] + 1, pivot[1]]\n            this.blocks[3] = [pivot[0] - 1, pivot[1] + 1]\n        }\n\n        this.rotation += 1\n    }\n}\n\nexport {Tetromino, Square, Line, T, L, J};","import React from 'react';\nimport {Container, Row, Col, Card} from \"react-bootstrap\";\n\nimport Score from \"./Score\";\nimport TetrominoPreview from \"./TetrominoPreview\";\nimport {Tetromino, Square, Line, T, L, J} from \"./game-logic/Tetrominos\";\n\nimport \"./game.css\";\n\nconst GRID_HEIGHT = 20;\nconst GRID_WIDTH = 10;\nconst TETROMINOS = [J, Square, Line, T, L, J];\nconst DEFAULT_GRID_COLOUR = \"grey\"\n\nfunction getRandomTetromino() {\n  return TETROMINOS[Math.floor(Math.random() * TETROMINOS.length)];\n}\n\nexport default class Game extends React.Component<any, any> {\n  intervals: Array<any>;\n  constructor(props) {\n      super(props);\n\n      const grid = [];\n      for (let i = 0; i < GRID_HEIGHT; i++) {\n        grid[i] = [];\n        for (let j = 0; j < GRID_WIDTH; j++) {\n          grid[i][j] = document.createElement(\"div\");\n          grid[i][j].classList.add(\"cell\");\n          grid[i][j].style.backgroundColor = DEFAULT_GRID_COLOUR;\n        }\n      }\n\n      const randomTetromino = getRandomTetromino();\n\n      const tetrominoRotation = [];\n      for (let i = 0; i < 5; i++) \n        tetrominoRotation.push(getRandomTetromino());\n\n      this.state = {\n        grid: grid,\n        activeTetromino: new randomTetromino(),\n        tetrominoRotation: tetrominoRotation,\n        score: 0,\n        level: 1,\n        gameLooop: null,\n      } \n\n      this.intervals = [];\n  }\n\n  moveTetromino(keyCode: number) {\n    for (let block of this.state.activeTetromino.blocks) {\n      this.state.grid[block[1]][block[0]].style.backgroundColor = DEFAULT_GRID_COLOUR;\n    }\n\n    if (keyCode === 37) {\n      if (!this.detectCollision(this.state.activeTetromino, -1, 0))\n        this.state.activeTetromino.updatePosition(-1, 0);\n    } else if (keyCode === 39) {\n      if (!this.detectCollision(this.state.activeTetromino, 1, 0))\n        this.state.activeTetromino.updatePosition(1, 0);\n    } else if (keyCode === 40) {\n      if (!this.detectCollision(this.state.activeTetromino, 0, 1))\n        this.state.activeTetromino.updatePosition(0, 1);\n    }\n  }\n\n  rotateTetromino() {\n    const copyTetromino = JSON.parse(JSON.stringify(this.state.activeTetromino));\n    copyTetromino.rotate = this.state.activeTetromino.rotate;\n    copyTetromino.rotate();\n    if (!this.detectCollision(copyTetromino, 0, 0)) {\n      const grid = this.state.grid;\n      for (let block of this.state.activeTetromino.blocks) {\n        grid[block[1]][block[0]].style.backgroundColor = DEFAULT_GRID_COLOUR;\n      }\n  \n      this.state.activeTetromino.rotate();\n    }\n  }\n\n  drawTetromino(tetromino: Tetromino) {\n    for (let block of tetromino.blocks) {\n      this.state.grid[block[1]][block[0]].style.backgroundColor = tetromino.colour;\n    }\n  }\n\n  detectCollision(tetromino: Tetromino, dx: number, dy: number) {\n    for (let block of tetromino.blocks) {\n      if (!(0 <= block[0] + dx && block[0] + dx < GRID_WIDTH) ||\n          !(0 <= block[1] + dy && block[1] + dy < GRID_HEIGHT) ||\n          this.state.grid[block[1] + dy][block[0] + dx].storeBlock) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getCompleteRows() {\n    const completeRows = [];\n    for (let i in this.state.grid) {\n      if (this.state.grid[i].every(x => x.storeBlock)) {\n        completeRows.push(i);\n      }\n    }\n    return completeRows;\n  }\n\n  clearRow(rowNum: number) {\n    for (let i = rowNum - 1; i >= 0; i--) {\n      for (let j in this.state.grid[i]) {\n        this.state.grid[i + 1][j].style.backgroundColor = \n            this.state.grid[i][j].style.backgroundColor;\n        this.state.grid[i + 1][j].storeBlock = \n            this.state.grid[i][j].storeBlock;\n      }\n    }\n  }\n\n  autoDropTetromino() {\n    for (let block of this.state.activeTetromino.blocks) {\n      this.state.grid[block[1]][block[0]].style.backgroundColor = DEFAULT_GRID_COLOUR;\n    }\n    this.state.activeTetromino.updatePosition(0, 1);\n  }\n\n  storeBlock() {\n    for (let block of this.state.activeTetromino.blocks) {\n      this.state.grid[block[1]][block[0]].storeBlock = true;\n    }\n  }\n\n  detectLose() {\n    return this.state.grid[0].some(x => x.storeBlock)\n  }\n\n  runGame() {\n    if (!this.detectCollision(this.state.activeTetromino, 0, 1)) {\n      this.autoDropTetromino();\n    } else {\n      this.storeBlock();\n      const tetrominoRotation = this.state.tetrominoRotation;\n      const randomTetromino = tetrominoRotation.shift();\n      tetrominoRotation.push(getRandomTetromino());\n      this.setState({activeTetromino: new randomTetromino(),\n                     tetrominoRotation: tetrominoRotation});\n    }\n    this.drawTetromino(this.state.activeTetromino);\n    for (let row of this.getCompleteRows()) {\n      this.clearRow(row);\n      this.setState({score: this.state.score + 1});\n    }\n    if (this.detectLose()) alert(\"You lose\");\n  }\n\n  componentDidMount() {\n    const gameContainer = document.getElementById(\"main-game\");\n    for (let row of this.state.grid) {\n      for (let cell of row) {\n        gameContainer.appendChild(cell);\n      }\n    }\n\n    window.addEventListener(\"keydown\", event => {\n      if (event.keyCode === 27) {\n        if (this.state.gameLoop) {\n          clearInterval(this.state.gameLoop);\n          this.setState({gameLoop: null});\n        } else {\n          this.setState({gameLoop: setInterval(() => {\n            this.runGame();\n          }, 100)});\n        }\n      } else if (event.keyCode === 38) {\n        this.rotateTetromino();\n        this.drawTetromino(this.state.activeTetromino);\n      } else {\n        this.intervals.push(setInterval(() =>{\n          this.moveTetromino(event.keyCode);\n          this.drawTetromino(this.state.activeTetromino);\n        }, 25));\n      }\n    })\n\n    window.addEventListener(\"keyup\", () => {\n      for (let interval of this.intervals) {\n        clearInterval(interval);\n      }\n      this.intervals = [];\n    })\n\n    this.setState({gameLoop: setInterval(() => {\n      this.runGame();\n    }, 100)});\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col xs={8}>\n            <div id=\"main-game\"/>\n          </Col>\n          <Col xs={4}>\n            <TetrominoPreview rotation={this.state.tetrominoRotation}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={8}>\n            <Score score={this.state.score} level={this.state.level}/>\n          </Col>\n          <Col xs={4}>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from \"react\";\nimport {Container, Row, Col, Card} from \"react-bootstrap\";\n\nimport Game from \"./Game\";\n\nexport default class Home extends React.Component {\n  render() {\n    return (\n      <Container style={{width: \"100%\", marginTop: \"2vh\"}}>\n        <Row>\n          <Col sm={6}>\n            <Game/>\n          </Col>\n          <Col sm={6}>\n          <Card>\n              <Card.Header>Tetris Clone - Game Description</Card.Header>\n              <Card.Body>\n                <Card.Title>Instructions</Card.Title> \n                <Card.Text>\n                  Each completely filled row will be cleared and points will be awarded. <br/>\n                  Fill multiple rows with a single piece to multiply the points gain. <br/>\n                  The game is over once any of your Tetrominos fill the top row. <br/>\n                  The goal is to play for as long as possible and score the most points. <br/>\n                </Card.Text>\n                <Card.Title>Controls</Card.Title>\n                <Card.Text>\n                  <b>Left, Down, Right:</b> move the Tetromino. <br/>\n                  <b>Up:</b> rotate the Tetromino. <br/>\n                  <b>Space:</b> Fast drop the Tetromino. <br/> \n                  <b>Shift:</b> Hold the Tetromino. <br/>\n                  <b>Escape:</b> Pause the game.\n                </Card.Text>\n              </Card.Body>\n            </Card>\n            <Card style={{marginTop: \"1vh\"}}>\n              <Card.Header>High Scores</Card.Header>\n              <Card.Body>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n","import React from 'react';\nimport {Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavigationBar from \"./components/NavigationBar\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <>\n      <NavigationBar/>\n      <Router>\n        <Route path=\"/\" component={Home}/>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
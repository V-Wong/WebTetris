{"version":3,"sources":["components/NavigationBar.tsx","components/game-logic/Tetrominos.tsx","components/Game.tsx","App.tsx","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","Brand","Nav","className","Link","href","React","Component","Tetromino","blocks","rotation","this","dx","dy","block","Line","y","i","x","Game","props","grid","j","document","createElement","classList","add","style","backgroundColor","state","activeTetromino","keyCode","detectCollision","updatePosition","copyTetromino","JSON","parse","stringify","rotate","tetromino","setState","storeBlock","gameContainer","getElementById","appendChild","window","addEventListener","event","rotateTetromino","moveTetromino","drawTetromino","setInterval","Container","marginTop","Row","Col","sm","id","App","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd600cff.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar, Nav} from \"react-bootstrap\";\n\nexport default class NavigationBar extends React.Component {\n    render() {\n        return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>Tetris Clone</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"/\">Home</Nav.Link>\n                <Nav.Link href=\"about\">About</Nav.Link>\n                <Nav.Link href=\"about\">Source Code</Nav.Link>\n                <Nav.Link href=\"about\">Other Projects</Nav.Link>\n            </Nav>\n        </Navbar>\n        )\n    }\n}","class Tetromino {\n    blocks: Array<Array<number>>;\n    rotation: number;\n    constructor() {\n        this.blocks = [];\n    }\n\n    updatePosition(dx: number, dy: number) {\n        for (let block of this.blocks) {\n            block[0] += dx;\n            block[1] += dy;\n        }\n    }\n}\n\nclass Square extends Tetromino {\n    constructor() {\n        super();\n        this.blocks = [[6, 0], [6, 1], [7, 0], [7, 1]];\n    }\n}\n\nclass Line extends Tetromino {\n    constructor() {\n        super();\n        this.blocks = [[6, 0], [6, 1], [6, 2], [6, 3]];\n        this.rotation = 0;\n    }\n\n    rotate() {\n        if (this.rotation % 4 === 0) {\n            const y = this.blocks[3][1]\n\n            let i = -1\n            for (let block of this.blocks) {\n                block[0] = block[0] + i;\n                block[1] = y;\n                i += 1;\n            }\n        } else if (this.rotation % 4 === 1) {\n            const x = this.blocks[2][0];\n\n            let i = -3\n            for (let block of this.blocks) {\n                block[0] = x;\n                block[1] = block[1] + i;\n                i += 1;\n            }\n        } else if (this.rotation % 4 === 2) {\n            const y = this.blocks[3][1];\n\n            let i = -2\n            for (let block of this.blocks) {\n                block[0] = block[0] + i;\n                block[1] = y;\n                i += 1;\n            } \n        } else {\n            const x = this.blocks[1][0];\n\n            let i = -3;\n            for (let block of this.blocks) {\n                block[0] = x;\n                block[1] = block[1] + i;\n                i += 1\n            }\n        }\n\n        this.rotation += 1\n    }\n}\n\nexport {Square, Line};","import React from 'react';\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nimport {Square, Line} from \"./game-logic/Tetrominos\";\n\nimport \"./game.css\";\n\nconst GRID_SIZE = 20;\n\nexport default class Game extends React.Component<any, any> {\n  constructor(props) {\n      super(props);\n\n      const grid = [];\n      for (let i = 0; i < 20; i++) {\n        grid[i] = [];\n        for (let j = 0; j < 10; j++) {\n          grid[i][j] = document.createElement(\"div\");\n          grid[i][j].classList.add(\"cell\");\n          grid[i][j].style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n        }\n      }\n\n      this.state = {\n        grid: grid,\n        activeTetromino: null\n      } \n  }\n\n  moveTetromino(keyCode) {\n    const grid = this.state.grid;\n\n    for (let block of this.state.activeTetromino.blocks) {\n      grid[block[1]][block[0]].style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n    }\n\n    if (keyCode === 37) {\n      if (!this.detectCollision(this.state.activeTetromino, -1, 0))\n        this.state.activeTetromino.updatePosition(-1, 0);\n    } else if (keyCode === 39) {\n      if (!this.detectCollision(this.state.activeTetromino, 1, 0))\n        this.state.activeTetromino.updatePosition(1, 0);\n    } else if (keyCode === 40) {\n      if (!this.detectCollision(this.state.activeTetromino, 0, 1))\n        this.state.activeTetromino.updatePosition(0, 1);\n    }\n  }\n\n  rotateTetromino() {\n    const copyTetromino = JSON.parse(JSON.stringify(this.state.activeTetromino));\n    copyTetromino.rotate = this.state.activeTetromino.rotate;\n    copyTetromino.rotate();\n    if (!this.detectCollision(copyTetromino, 0, 0)) {\n      const grid = this.state.grid;\n      for (let block of this.state.activeTetromino.blocks) {\n        grid[block[1]][block[0]].style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n      }\n  \n      this.state.activeTetromino.rotate();\n    }\n  }\n\n  drawTetromino(tetromino) {\n    const grid = this.state.grid;\n    for (let block of tetromino.blocks) {\n      grid[block[1]][block[0]].style.backgroundColor = \"red\";\n    }\n    this.setState({grid: grid});\n  }\n\n  detectCollision(tetromino, dx, dy) {\n    for (let block of tetromino.blocks) {\n      if (!(0 <= block[0] + dx && block[0] + dx < 10) ||\n          !(0 <= block[1] + dy && block[1] + dy < 20) ||\n          this.state.grid[block[1] + dy][block[0] + dx].storeBlock) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  componentDidMount() {\n    const gameContainer = document.getElementById(\"main-game\");\n    for (let i = 0; i < 20; i++) {\n      for (let j = 0; j < 10; j++) {\n        gameContainer.appendChild(this.state.grid[i][j]);\n      }\n    }\n\n    if (!this.state.activeTetromino) this.setState({activeTetromino: new Line()})\n\n    window.addEventListener(\"keydown\", event => {\n      if (event.keyCode === 38) this.rotateTetromino();\n      this.moveTetromino(event.keyCode);\n      this.drawTetromino(this.state.activeTetromino);\n    })\n\n    setInterval(() => {\n      const grid = this.state.grid;\n      if (!this.detectCollision(this.state.activeTetromino, 0, 1)) {\n        for (let block of this.state.activeTetromino.blocks) {\n          grid[block[1]][block[0]].style.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n        }\n        this.state.activeTetromino.updatePosition(0, 1);\n      } else {\n        for (let block of this.state.activeTetromino.blocks) {\n          grid[block[1]][block[0]].storeBlock = true;\n        }\n        this.setState({activeTetromino: new Line()});\n      }\n      this.drawTetromino(this.state.activeTetromino);\n    }, 100);\n  }\n\n  render() {\n    return (\n      <Container style={{marginTop: \"5vh\"}}>\n        <Row>\n          <Col sm={8}>\n            <div id=\"main-game\">\n            </div>\n          </Col>\n          <Col sm={4}>\n            <div>T</div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}","import React from 'react';\nimport {Switch, BrowserRouter as Router, Route} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavigationBar from \"./components/NavigationBar\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <>\n      <NavigationBar/>\n      <Router>\n        <Route path=\"/\" component={Game}/>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}